/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { EventData, PastEventOptions } from 'web3-eth-contract';

export interface RentalAgentContract extends Truffle.Contract<RentalAgentInstance> {
    'new'(_token: string, _estateAgent: string, meta?: Truffle.TransactionDetails): Promise<RentalAgentInstance>;
}

export interface AddAdmin {
    name: 'AddAdmin';
    args: {
        newAdmin: string;
        0: string;
    };
}

export interface ClaimRent {
    name: 'ClaimRent';
    args: {
        owner: string;
        amount: BN;
        toClaim: BN;
        0: string;
        1: BN;
        2: BN;
    };
}

export interface Deposit {
    name: 'Deposit';
    args: {
        from: string;
        tokenId: BN;
        0: string;
        1: BN;
    };
}

export interface RemoveAdmin {
    name: 'RemoveAdmin';
    args: {
        oldAdmin: string;
        0: string;
    };
}

export interface Rented {
    name: 'Rented';
    args: {
        renter: string;
        tokenId: BN;
        rentPrice: BN;
        0: string;
        1: BN;
        2: BN;
    };
}

export interface SetAgent {
    name: 'SetAgent';
    args: {
        _newContract: string;
        0: string;
    };
}

export interface SetToken {
    name: 'SetToken';
    args: {
        _newContract: string;
        0: string;
    };
}

export interface Withdraw {
    name: 'Withdraw';
    args: {
        to: string;
        tokenId: BN;
        0: string;
        1: BN;
    };
}

type AllEvents = AddAdmin | ClaimRent | Deposit | RemoveAdmin | Rented | SetAgent | SetToken | Withdraw;

export interface RentalAgentInstance extends Truffle.ContractInstance {
    /**
     * Add a new admin
     * @param newAdmin the address of the admin to add Only admin(s) can add new admin
     */
    addAdmin: {
        (newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
        call(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    adminByAddress(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    estateAgent(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Remove admin
     * @param oldAdmin the address of the admin to remove Self explanatory
     */
    removeAdmin: {
        (oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
        call(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    spaceInfo(arg0: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<[string, string, BN, BN]>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Verify Admin
     * @param admin the address of the admin to check
     */
    verifyAdmin(admin: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Set token address
     * @param _token the address of the newly deployed SPACE token In case if token address ever changes, we can set this contract to point there
     */
    setToken: {
        (_token: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
        call(_token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(_token: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(_token: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Set EstateAgent address
     * @param _estateAgent the address of the EstateAgent
     */
    setAgent: {
        (_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
        call(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Deposit the SPACE token to this contract
     * need to write an approve method*
     * @param tokenId ID of the token to check
     */
    deposit: {
        (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Withdraw the SPACE token from this contract
     * this will withdraw both the rental earned and the SPACE token*
     * @param tokenId ID of the token to check
     */
    withdrawSpace: {
        (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Allows users to rent a SPACE token of choice
     * rent cost 1/10 of the price to buy new & lasts for 1 year (2252571 blocks)*
     * @param tokenId ID of the token to check
     */
    rent: {
        (tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(
            tokenId: number | BN | string,
            _tokenURI: string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<string>;
        estimateGas(
            tokenId: number | BN | string,
            _tokenURI: string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<number>;
    };

    /**
     * Claim the rent earned
     * Owner can claim rent right on Day 1 of renting*
     * @param tokenId id of the SPACE token
     */
    claimRent: {
        (owner: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(owner: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(
            owner: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<string>;
        estimateGas(
            owner: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<number>;
    };

    /**
     * Check who has the rights to use the token currently
     * @param tokenId ID of the token to check
     */
    checkDelegatedOwner(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Get balance
     */
    balance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    methods: {
        /**
         * Add a new admin
         * @param newAdmin the address of the admin to add Only admin(s) can add new admin
         */
        addAdmin: {
            (newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
            call(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        adminByAddress(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

        estateAgent(txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * Remove admin
         * @param oldAdmin the address of the admin to remove Self explanatory
         */
        removeAdmin: {
            (oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
            call(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(oldAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        spaceInfo(
            arg0: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<[string, string, BN, BN]>;

        token(txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * Verify Admin
         * @param admin the address of the admin to check
         */
        verifyAdmin(admin: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

        /**
         * Set token address
         * @param _token the address of the newly deployed SPACE token In case if token address ever changes, we can set this contract to point there
         */
        setToken: {
            (_token: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
            call(_token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(_token: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(_token: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * Set EstateAgent address
         * @param _estateAgent the address of the EstateAgent
         */
        setAgent: {
            (_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(_estateAgent: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * Deposit the SPACE token to this contract
         * need to write an approve method*
         * @param tokenId ID of the token to check
         */
        deposit: {
            (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * Withdraw the SPACE token from this contract
         * this will withdraw both the rental earned and the SPACE token*
         * @param tokenId ID of the token to check
         */
        withdrawSpace: {
            (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * Allows users to rent a SPACE token of choice
         * rent cost 1/10 of the price to buy new & lasts for 1 year (2252571 blocks)*
         * @param tokenId ID of the token to check
         */
        rent: {
            (tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<void>;
            sendTransaction(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * Claim the rent earned
         * Owner can claim rent right on Day 1 of renting*
         * @param tokenId id of the SPACE token
         */
        claimRent: {
            (owner: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(owner: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(
                owner: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                owner: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * Check who has the rights to use the token currently
         * @param tokenId ID of the token to check
         */
        checkDelegatedOwner(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * Get balance
         */
        balance(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    };

    getPastEvents(event: string): Promise<EventData[]>;
    getPastEvents(
        event: string,
        options: PastEventOptions,
        callback: (error: Error, event: EventData) => void
    ): Promise<EventData[]>;
    getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
    getPastEvents(event: string, callback: (error: Error, event: EventData) => void): Promise<EventData[]>;
}
