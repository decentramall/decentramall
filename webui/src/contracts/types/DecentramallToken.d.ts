/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { EventData, PastEventOptions } from 'web3-eth-contract';

export interface DecentramallTokenContract extends Truffle.Contract<DecentramallTokenInstance> {
    'new'(agent: string, meta?: Truffle.TransactionDetails): Promise<DecentramallTokenInstance>;
}

export interface Approval {
    name: 'Approval';
    args: {
        owner: string;
        approved: string;
        tokenId: BN;
        0: string;
        1: string;
        2: BN;
    };
}

export interface ApprovalForAll {
    name: 'ApprovalForAll';
    args: {
        owner: string;
        operator: string;
        approved: boolean;
        0: string;
        1: string;
        2: boolean;
    };
}

export interface Transfer {
    name: 'Transfer';
    args: {
        from: string;
        to: string;
        tokenId: BN;
        0: string;
        1: string;
        2: BN;
    };
}

type AllEvents = Approval | ApprovalForAll | Transfer;

export interface DecentramallTokenInstance extends Truffle.ContractInstance {
    /**
     * See {IERC721-approve}.
     */
    approve: {
        (to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(
            to: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<string>;
        estimateGas(to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.
     */
    baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(owner: string, operator: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll: {
        (operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(interfaceId: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721Enumerable-tokenByIndex}.
     */
    tokenByIndex(index: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    tokenOfOwnerByIndex(
        owner: string,
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom: {
        (from: string, to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(
            from: string,
            to: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<void>;
        sendTransaction(
            from: string,
            to: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<string>;
        estimateGas(
            from: string,
            to: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<number>;
    };

    /**
     * Mint a token
     * only the EstateAgent can call this function to prevent scams
     * @param purchaser address who purchase the SPACE token
     */
    mint: {
        (purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
        call(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
        sendTransaction(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Burn a token
     * @param tokenId id of the token to burn
     */
    burn: {
        (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
        estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setTokenURI: {
        (tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<
            Truffle.TransactionResponse<AllEvents>
        >;
        call(tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
        sendTransaction(
            tokenId: number | BN | string,
            _tokenURI: string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<string>;
        estimateGas(
            tokenId: number | BN | string,
            _tokenURI: string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<number>;
    };

    /**
     * Verify if a token is legitimate (bought through the EstateAgent)
     * @param sender the address which initiated the action
     * @param tokenId id of the token to check
     */
    verifyLegitimacy(
        sender: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    methods: {
        /**
         * See {IERC721-approve}.
         */
        approve: {
            (to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * See {IERC721-balanceOf}.
         */
        balanceOf(owner: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

        /**
         * Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.
         */
        baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721-getApproved}.
         */
        getApproved(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721-isApprovedForAll}.
         */
        isApprovedForAll(owner: string, operator: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

        /**
         * See {IERC721Metadata-name}.
         */
        name(txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721-ownerOf}.
         */
        ownerOf(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721-setApprovalForAll}.
         */
        setApprovalForAll: {
            (operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(
                operator: string,
                approved: boolean,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(operator: string, approved: boolean, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
         */
        supportsInterface(interfaceId: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

        /**
         * See {IERC721Metadata-symbol}.
         */
        symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721Enumerable-tokenByIndex}.
         */
        tokenByIndex(index: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

        /**
         * See {IERC721Enumerable-tokenOfOwnerByIndex}.
         */
        tokenOfOwnerByIndex(
            owner: string,
            index: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<BN>;

        /**
         * See {IERC721Metadata-tokenURI}.
         */
        tokenURI(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;

        /**
         * See {IERC721Enumerable-totalSupply}.
         */
        totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

        /**
         * See {IERC721-transferFrom}.
         */
        transferFrom: {
            (from: string, to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<void>;
            sendTransaction(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * Mint a token
         * only the EstateAgent can call this function to prevent scams
         * @param purchaser address who purchase the SPACE token
         */
        mint: {
            (purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
            sendTransaction(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(purchaser: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        /**
         * Burn a token
         * @param tokenId id of the token to burn
         */
        burn: {
            (tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
            sendTransaction(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
            estimateGas(tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
        };

        setTokenURI: {
            (tokenId: number | BN | string, _tokenURI: string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<void>;
            sendTransaction(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                tokenId: number | BN | string,
                _tokenURI: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * Verify if a token is legitimate (bought through the EstateAgent)
         * @param sender the address which initiated the action
         * @param tokenId id of the token to check
         */
        verifyLegitimacy(
            sender: string,
            tokenId: number | BN | string,
            txDetails?: Truffle.TransactionDetails
        ): Promise<boolean>;

        /**
         * See {IERC721-safeTransferFrom}.
         */
        'safeTransferFrom(address,address,uint256)': {
            (from: string, to: string, tokenId: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
                Truffle.TransactionResponse<AllEvents>
            >;
            call(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<void>;
            sendTransaction(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                from: string,
                to: string,
                tokenId: number | BN | string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };

        /**
         * See {IERC721-safeTransferFrom}.
         */
        'safeTransferFrom(address,address,uint256,bytes)': {
            (
                from: string,
                to: string,
                tokenId: number | BN | string,
                _data: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<Truffle.TransactionResponse<AllEvents>>;
            call(
                from: string,
                to: string,
                tokenId: number | BN | string,
                _data: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<void>;
            sendTransaction(
                from: string,
                to: string,
                tokenId: number | BN | string,
                _data: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<string>;
            estimateGas(
                from: string,
                to: string,
                tokenId: number | BN | string,
                _data: string,
                txDetails?: Truffle.TransactionDetails
            ): Promise<number>;
        };
    };

    getPastEvents(event: string): Promise<EventData[]>;
    getPastEvents(
        event: string,
        options: PastEventOptions,
        callback: (error: Error, event: EventData) => void
    ): Promise<EventData[]>;
    getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
    getPastEvents(event: string, callback: (error: Error, event: EventData) => void): Promise<EventData[]>;
}
